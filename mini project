// C++ program for the above approach
#include <bits/stdc++.h>
using namespace std;

int maxindex(int* dist, int n)
{
	int mi = 0;
	for (int i = 0; i < n; i++) {
		if (dist[i] > dist[mi])
			mi = i;
	}
	return mi;
}

void selectKcities(int n, int weights[4][4], int k)
{
	int* dist = new int[n];
	vector<int> centers;
	for (int i = 0; i < n; i++) {
		dist[i] = INT_MAX;
	}

	// index of city having the maximum distance to it's closest center
	int max = 0;
	for (int i = 0; i < k; i++) {
		centers.push_back(max);
		for (int j = 0; j < n; j++) {

			// updating the distance of the cities to their closest centers
			dist[j] = min(dist[j], weights[max][j]);
		}

		// updating the index of the  city with the maximum distance to it's closest center
		max = maxindex(dist, n);
	}

	// Printing the maximum distance  of a city to a center that is our answer
	cout << endl << dist[max] << endl;


	for (int i = 0; i < centers.size(); i++) {
		cout << centers[i] << " ";
	}
	cout << endl;
}

// Driver Code
int main()
{
	int n = 4;
	int weights[4][4] = { { 0, 4, 8, 5 },
						{ 4, 0, 10, 7 },
						{ 8, 10, 0, 9 },
						{ 5, 7, 9, 0 } };
	int k = 2;

	// Function Call
	selectKcities(n, weights, k);
}
// 




#include <iostream>: Includes the input/output library.
#include <vector>: Includes the vector library for dynamic arrays.
#include <algorithm>: Includes algorithms like sort.
using namespace std;: Simplifies access to standard library names.
bool compare(pair<int, int> &a, pair<int, int> &b): Comparator to sort pairs by ending times.
return a.second < b.second;: Ensures shops are sorted by their closing times.
int maxShopsVisited(vector<int> &S, vector<int> &E, int K): Function to calculate the maximum shops visited.
int N = S.size();: Gets the number of shops.
vector<pair<int, int>> shops(N);: Creates a vector to store shops' timings as pairs.
for (int i = 0; i < N; ++i): Iterates over all shops.
shops[i] = {S[i], E[i]};: Pairs start and end times for each shop.
sort(shops.begin(), shops.end(), compare);: Sorts shops by their ending times.
vector<int> endTimes(K, 0);: Initializes the end times for all persons as 0.
int maxVisited = 0;: Initializes the count of shops visited.
for (int i = 0; i < N; ++i): Iterates over all sorted shops.
int personIndex = -1;: Tracks the first available person.
for (int j = 0; j < K; ++j): Iterates over all persons.
if (endTimes[j] <= shops[i].first): Checks if a person is free to visit the shop.
personIndex = j;: Assigns the person to visit the shop.
break;: Stops further checks once a person is found.
if (personIndex != -1): If a valid person is found.
endTimes[personIndex] = shops[i].second;: Updates the end time for the person.
maxVisited++;: Increments the count of visited shops.
return maxVisited;: Returns the total number of shops visited.
int main(): Starts the program execution.
cout << "Enter the number of shops: ";: Prompts user input for number of shops.
cin >> N;: Reads the number of shops.
vector<int> S(N), E(N);: Creates vectors for start and end times.
cout << "Enter the starting times of the shops: ";: Prompts user input for start times.
for (int i = 0; i < N; ++i): Iterates over the number of shops.
cin >> S[i];: Reads start times into the vector.
cout << "Enter the ending times of the shops: ";: Prompts user input for end times.
cin >> E[i];: Reads end times into the vector.
cout << "Enter the number of persons: ";: Prompts user input for number of persons.
cin >> K;: Reads the number of persons.
int result = maxShopsVisited(S, E, K);: Calculates the maximum shops visited.
cout << "Maximum number of shops visited: " << result << endl;: Outputs the result.
return 0;: Ends the program.







1. `#include <iostream>`: Includes the library for input/output.  
2. `#include <vector>`: Includes the library for dynamic arrays.  
3. `using namespace std;`: Allows simpler usage of standard library components.  
4. `int maxProfit(const vector<int> &prices)`: Declares a function to calculate maximum profit.  
5. `int n = prices.size();`: Gets the number of days from the size of the prices vector.  
6. `int profit = 0, currentDay = n - 1;`: Initializes profit to 0 and sets currentDay to the last day.  
7. `while (currentDay > 0)`: Loops until all days are checked.  
8. `int day = currentDay - 1;`: Starts comparison from the previous day of currentDay.  
9. `while (day >= 0 && (prices[currentDay] > prices[day]))`: Finds days where buying is profitable.  
10. `profit += (prices[currentDay] - prices[day]);`: Adds profit from the difference in prices.  
11. `day--;`: Moves to the previous day.  
12. `currentDay = day;`: Updates currentDay to the last day considered for buying.  
13. `return profit;`: Returns the total calculated profit.  
14. `int main()`: Main function where program execution starts.  
15. `int N;`: Declares the number of days.  
16. `cout << "Enter the number of days: ";`: Prompts user input for the number of days.  
17. `cin >> N;`: Reads the number of days.  
18. `vector<int> prices(N);`: Creates a vector to store stock prices for each day.  
19. `cout << "Enter the stock prices: ";`: Prompts user input for stock prices.  
20. `for (int i = 0; i < N; i++)`: Loops to read stock prices.  
21. `cin >> prices[i];`: Reads stock price for day `i`.  
22. `cout << "Maximum profit: " << maxProfit(prices) << endl;`: Outputs the maximum profit.  
23. `return 0;`: Ends the program.
